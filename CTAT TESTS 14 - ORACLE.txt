CTAT Assessment Test 14


1)Given a Boolean 2d array where every elements are 0’s or 1’s.

CODE :-


#include<stdio.h>
#include<limits.h>
int main()
{
int row , col ,count , m , n , max , maxrow;
scanf("%d%d" ,&m , &n);
int arr[m][n];
for( row = 0 ; row < m ; row++)
{
for(col = 0 ; col < n ; col++)
scanf("%d" , &arr[row][col]);
}
max = INT_MIN;
maxrow = -1;
for(row = 0 ; row < m ; row++)
{
for(col = 0 , count = 0; col < n ; col++)
if(arr[row][col] == 1) count++;
if(count > max)
{
max = count ;
maxrow = row;
}
}
printf("%d" , maxrow);
return 0;
}



2)Write a program to find the first occurrence of one string into another and print the position of the string

CODE :- 

#include<stdio.h>
#include<string.h>
int main()
{
char str[100],sub[100],*pos;
scanf("%[^\n]s",str);
scanf("%s",sub);
pos=strstr(str,sub);
printf("%d",pos-str);
}



3)Suppose we have a sorted array, and now we rotate it N times, find the pivot element. The pivot element would be the largest element.


CODE :- 

#include<stdio.h>
#include<malloc.h>
int findPeakElement(int *arr,int low,int high)
{
int mid;
if(low > high) return arr[high];
mid=(low+high)/2;
if(arr[mid]>=arr[mid-1] && arr[mid] >=arr[mid+1]) return arr[mid];
if(arr[mid] > arr[high])
return findPeakElement(arr,mid,high);
else return findPeakElement(arr,low,mid);
}
int main()
{
int *arr,n,ctr;
scanf("%d",&n);
arr=(int*)malloc(sizeof(int)*n);
for( ctr =0 ; ctr < n ; ctr++)
scanf("%d",&arr[ctr]);
printf("%d",findPeakElement(arr,0,n-1));
return 0;
}



4)output the string such that count of same adjacent characters in string are less than burst length

CODE :- 


#include<stdio.h>
#include<string.h>
int main()
{
char str[100];
int burstLen,ctr1,ctr2,count=1,safe;
scanf("%s %d",str,&burstLen);
for( ctr1=0,ctr2=1; str[ctr2] ; )
{
if( str[ctr1]==str[ctr2])
{
if(count==1)safe =ctr1-1;
count++;
ctr1++;ctr2++;
}
else
{
if( count >= burstLen)
{
strcpy(str+safe+1,str+ctr2);
ctr1=safe-1;
ctr2=safe;
count=1;
}
else
{
ctr1++;ctr2++;count=1;
}
}
}
if( count !=1)
strcpy(str+safe+1,str+ctr2);
printf("%s",str);
return 0;
}



5)A positive integer is called Binary-Decimal it contains only 0’s and 1’s


CODE :- 


#include<stdio.h>

int nod(int num)

{

int spare = 0 ,digit , power , newnum = 0 ;

power = 1;

while(num/power)

{

digit= (num / power)%10;

spare = spare * 10 + 1;

if(digit == 0 || digit == 9)

newnum = 0 * power + newnum;

else

newnum = 1 * power + newnum;

power *= 10;

}

return (newnum == 0||spare<=num) ? spare : newnum;

}

int main()

{

int num , val , ctr , count = 0 ;;

scanf("%d" , &num);

do

{

val = nod(num);

if( val > num && num >= 10)

{

printf("%d" , num );

count++;

break;

}

if( num>=0 && num <= 9)

{

for(ctr = 1 ; ctr <= num ; ctr++)

{

printf("%d " , 1);

count++;

}

break;

}

while( (num-val)>=0 && num)

{

num -= val;

printf("%d " , val);

count++;

}

}while( num != 0 );

printf("\n%d" , count);

return 0;

}