CTAT Assessment Test 16

1)Note : Don't use any matrix

CODE :- 

#include<stdio.h>
int main()
{
int N , row ,col , val , counter;
scanf("%d" , &N);
for(row = N ; row > 0 ; row-- , printf("\n"))
{
printf("%d ", N-row+1);
for(counter = N-1 ,val = 1 ,val = val + counter + (N - row+1 ), col = 1 ; col < row ; col++ , counter--)
{
printf("%d " , val);
val += counter;
}
}

return 0;
}



2)Given an array and a threshold value find the o/p

CODE :- 


#include<stdio.h>
int main()
{
int N , threshold , ind, count = 0;
scanf("%d" , &N);
int arr[N];
for(ind = 0 ; ind < N ; scanf("%d" , &arr[ind++]));
scanf("%d" , &threshold);
for(ind = 0 ; ind < N ; ind++)
count += (arr[ind]/ threshold) + ((arr[ind] % threshold)==0 ? 0 : 1);
printf("%d " ,count);
return 0;
}



3)Print the pattern based on previous row 

CODE :- 


#include<stdio.h>
#include<malloc.h>
int main()
{
int N , row , col , ctr ,count , val , ind;
scanf("%d" ,&N);
int **arr;
arr = (int**) calloc(N , sizeof(int*));
for(ctr = 0 ; ctr < N ; ctr++)
arr[ctr] = (int*)calloc(N*N/4 , sizeof(int));
arr[0][0] = 1;
ind = 0;
val = 1;
count = 0;
for(row = 0 ; row < N-1 ; row++ , ind = 0 )
{
for(col = 0 ; arr[row][col] && col < (N*N/4)-1 ; col++)
{
if(arr[row][col] == arr[row][col+1])
count++;
else if(arr[row][col+1] == 0 && count == 0) // last mismatch
{
arr[row+1][ind] = 1;
arr[row+1][ind+1] = arr[row][col];
count = 0;
ind += 2;
}
else
{
arr[row+1][ind] = count + 1;
arr[row+1][ind+1] = arr[row][col];
count = 0;
ind += 2;
}
}
}
for(row = 0 ; row < N ; row++ , printf("\n"))
{
for(col = 0 ; arr[row][col] && col < N*N/4 ; col++)
printf("%d " , arr[row][col]);
}
return 0;
}



4)Mooshak the mouse has been placed in a maze.There is a huge chunk of cheese somewhere in the maze. The maze is represented as a two dimensional array of integers, where 0 represents walls.1 repersents paths where mooshak can move and 9 represents the huge chunk of cheese. Mooshak starts in the top left corner at 0. Write a method is Path of class Maze Path to determine if Mooshak can reach the huge chunk of cheese. The input to is Path consists of a two dimensional array gnd for the maze matrix. the method should return 1 if there is a path from Mooshak to the cheese.and 0 if not Mooshak is not allowed to leave the maze or climb on walls.

CODE :- 


#include<stdio.h>
//#include<conio.h>
//#define SIZE 8
#define VISITED 1
#define NOT_VISITED 0
#define isValid(x) (x >=0 && x < size)

int size;
int visited[10][10];
int isVisited(int row, int col)
{

return visited[row][col];
}

int isPath(int maze[10][10], int row, int col )
{
static int cheese_found=0;
// left
int r, c;
if(maze[row][col] == 9)
{
cheese_found = 1;
return cheese_found;
}
r=row;
c= col -1;
if(isValid(r) && isValid(c) && maze[r][c]!=0 && isVisited(r,c) !=1 && cheese_found==0)
{
visited[row][col] = VISITED;
isPath(maze, r,c);
visited[r][c] = NOT_VISITED;

}
// up
r=row - 1;
c= col ;
if(isValid(r) && isValid(c) && maze[r][c]!=0 && isVisited(r,c) !=1&& cheese_found==0)
{
visited[row][col] = VISITED;
isPath(maze, r,c);
visited[r][c] = NOT_VISITED;

}
// right
r=row;
c= col +1 ;
if(isValid(r) && isValid(c) && maze[r][c]!=0 && isVisited(r,c) !=1&& cheese_found==0)
{
visited[row][col] = VISITED;
isPath(maze, r,c);
visited[r][c] = NOT_VISITED;

}
//down
r=row + 1;
c= col ;
if(isValid(r) && isValid(c) && maze[r][c]!=0 && isVisited(r,c) !=1&& cheese_found==0)
{
visited[row][col] = VISITED;
isPath(maze, r,c);
visited[r][c] = NOT_VISITED;

}
return cheese_found;
}
int main()
{
int maze[10][10] ,row,col;//max size will 10, so by default declare as 10 X 10
/*
{1, 0, 1, 1, 1, 0, 0, 1},
{1, 0, 0, 0, 1, 1, 1, 1},
{1, 0, 0, 0, 0, 0, 0, 9},
{1, 0, 1, 0, 1, 0, 1, 1},
{1, 1, 1, 0, 1, 0, 0, 1},
{1, 0, 1, 0, 1, 1, 0, 1},
{1, 0, 0, 0, 0, 1, 0, 1},
{1, 1, 1, 1, 1, 1, 1, 1},
};
*/
scanf("%d",&size); //size is declared as unblocked variable
for( row= 0 ;row < size; row++)
{
for(col = 0 ; col <size ;col++)
scanf("%d",&maze[row][col]);
}
printf("%d",isPath(maze, 0,0));

//getch();
}



5)Consider the below series:

1, 2, 1, 3, 2, 5, 3, 7, 5, 11, 8, 13, 13, 17, ...

This series is a mixture of 2 series â€“ all the odd terms in this series form a Fibonacci series and all the even terms are the prime numbers in ascending order.

Write a program to find the Nth term in this series.

The value N is a Positive integer that should be read from STDIN. The Nth term that is calculated by the program should be written

to STDOUT. Other than the value of Nth term, no other characters/strings or message should be written to STDOUT.

For example, when N = 14, the 14th term in the series is 17. So only the value 17 should be printed to STDOUT.


CODE :-


#include<stdio.h>
#define MAX 1000
void primeSeries(int n)
{
unsigned long long int num,fact,count=1;
if( n == 1)
printf("2");
else{
for( num = 3 ; num <= MAX ; num+=2 )
{
for(fact=2; fact <=num/2 ; fact++)
if( num % fact ==0) break;
if(fact > num / 2)
{
count++;
if(count == n) printf("%llu",num);
}
}
}
}
void fiboSeries(int n)
{
unsigned long long int n1,n2,sum,count=2;
n1=n2=1;
if(n < 3)printf("1");
else
{
while( count != n )
{
sum = n1+n2 ;
n1=n2;
n2 = sum;
count++;
}
printf("%llu",sum);
}
}
int main()
{
int n;
scanf("%d",&n);
if(n % 2 == 0 )
primeSeries(n/2);
else fiboSeries(n/2+1);
}
