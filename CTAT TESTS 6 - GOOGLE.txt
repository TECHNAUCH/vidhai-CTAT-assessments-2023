CTAT TEST 6 - GOOGLE


1)Given a sorted array arr[] and a number x, write a function that counts the occurrences of x in arr[]. Expected time complexity is O(Logn).

CODE :- 

#include<stdio.h>
#include<malloc.h>
int binarySearch(int arr[], int l, int r, int x) 
{ 
 if (r < l) 
 return -1; 
 
 int mid = l + (r - l) / 2; 
 if (arr[mid] == x) 
 return mid; 
 
 if (arr[mid] > x) 
 return binarySearch(arr, l, mid - 1, x); 

 return binarySearch(arr, mid + 1, r, x); 
} 
 
int countOccurrences(int arr[], int n, int x) 
{ 
 int ind = binarySearch(arr, 0, n - 1, x); 
 
 if (ind == -1) 
 return 0; 
 int count = 1; 
 int left = ind - 1; 
 while (left >= 0 && arr[left] == x) 
 count++, left--; 
 
 int right = ind + 1; 
 while (right < n && arr[right] == x) 
 count++, right++; 
 
 return count; 
} 
 
int main() 
{ 
 int *arr;//[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 }; 
 int n;// = sizeof(arr) / sizeof(arr[0]); 
 int x = 2,ctr;
 scanf("%d",&n);
 arr=(int*)malloc(sizeof(int)*n);
 for(ctr=0;ctr<n;ctr++)
 scanf("%d",&arr[ctr]);
 scanf("%d",&x);
 printf("%d",countOccurrences(arr, n, x)); 
 return 0; 
}


2)Given a string of words with lots of spaces between the words , remove all the unnecessary spaces like

CODE :- 


#include<stdio.h>
#include<string.h>
int main()
{
 char str[100];
 int ctr,count=0,safe;
 scanf("%[^\n]s",str);
 for( ctr =0,safe=0 ; str[ctr] ; )
 {
 if( str[ctr]==' '){
 //safe = ctr;
 while(str[ctr]==' ')ctr++;
 count++;
 }
 else
 {
 if(count!=0) 
 str[safe++]=' ';
 while(str[ctr]!=' '&&str[ctr]!=NULL)str[safe++]=str[ctr++];
 }
 }
 str[safe]='\0';
 printf("%s",str);
 return 0;
}


3)Given an array that contains both positive and negative integers, find the product of the maximum product subarray. Expected Time complexity is O(n) and only O(1) extra space can be used.

Examples: Input: arr[] = {6, -3, -10, 0, 2}

Output:  180 // The subarray is {6, -3, -10}

Input: arr[] = {-1, -3, -10, 0, 60}

Output:  60 // The subarray is {60}

Input: arr[] = {-2, -3, 0, -2, -40}

Output:  80 // The subarray is {-2, -40}


CODE :- 


#include <stdio.h>

// Utility functions to get minimum of two integers
int min (int x, int y) {return x < y? x : y; }

// Utility functions to get maximum of two integers
int max (int x, int y) {return x > y? x : y; }

/* Returns the product of max product subarray.
 Assumes that the given array always has a subarray
 with product more than 1 */
int maxSubarrayProduct(int arr[], int n)
{
 // max positive product ending at the current position
 int max_ending_here = 1;

 // min negative product ending at the current position
 int min_ending_here = 1;

 // Initialize overall max product
 int max_so_far = 1;

 /* Traverse through the array. Following values are
 maintained after the i'th iteration:
 max_ending_here is always 1 or some positive product
 ending with arr[i]
 min_ending_here is always 1 or some negative product
 ending with arr[i] */
 for (int i = 0; i < n; i++)
 {
 /* If this element is positive, update max_ending_here.
Update min ending here only if min ending here is
/
 Update min_ending_here only if min_ending_here is
 negative */
 if (arr[i] > 0)
 {
 max_ending_here = max_ending_here*arr[i];
 min_ending_here = min (min_ending_here * arr[i], 1);
 }

 /* If this element is 0, then the maximum product
 cannot end here, make both max_ending_here and
 min_ending_here 0
 Assumption: Output is alway greater than or equal
 to 1. */
 else if (arr[i] == 0)
 {
 max_ending_here = 1;
 min_ending_here = 1;
 }

 /* If element is negative. This is tricky
 max_ending_here can either be 1 or positive.
 min_ending_here can either be 1 or negative.
 next min_ending_here will always be prev.
 max_ending_here * arr[i] next max_ending_here
 will be 1 if prev min_ending_here is 1, otherwise
 next max_ending_here will be prev min_ending_here *
 arr[i] */
 else
 {
 int temp = max_ending_here;
 max_ending_here = max (min_ending_here * arr[i], 1);
 min_ending_here = temp * arr[i];
 }

 // update max_so_far, if needed
 if (max_so_far < max_ending_here)
 max_so_far = max_ending_here;
 }

 return max_so_far;
}

// Driver Program to test above function
int main()
{
 int arr[100];// = {1, -2, -3, 0, 7, -8, -2};
 int n ,ctr;//= sizeof(arr)/sizeof(arr[0]);
 scanf("%d",&n);
 for(ctr=0;ctr<n;ctr++)
 scanf("%d",&arr[ctr]);
 printf("%d", maxSubarrayProduct(arr, n));
 return 0;
} 


4)Given a positive integer n,find if it can be expressed as 5^x where x>0.x is an integer.

CODE :- 

#include<stdio.h>
int main()
{
 unsigned long long num,power=1,ctr;
 scanf("%llu",&num);
 for( ctr=0; power<num;ctr++)
 power*=5;
 if( power == num )printf("Yes";
 else
 printf("No";
 return 0;
}


5)Reversing the rst K elements of a Queue Given an integer k and a queue of integers, we need to reverse the order of the rst k elements of the queue, leaving the other elements in the same relative order. Only following standard operations are allowed on queue. enqueue(x) : Add an item x to rear of queue dequeue() : Remove an item from front of queue size(): Returns number of elements in queue. front() : Finds front item. 


CODE :- 


#include<stdio.h>
#include<malloc.h>
typedef struct que
{
 int data;
 struct que *next;
}Q;
Q *front, *rear;
int size;
Q* createNode( int gd)
{
 Q* newNode;
 newNode = (Q*)malloc(sizeof(Q));
 newNode->data=gd;
 newNode->next=NULL;
 size++;
 return newNode;
}
void enq( int gd )
{
 if( front==NULL) front = rear = createNode(gd);
 else
 rear = rear->next = createNode(gd);
}
int deq()
{
 int sd=-1;
 Q* s=NULL;
 if(front)
 {
 s = front;
 front = front->next;
 sd=s->data;
 size--;
 free(s);
 }
 return sd;
}
void reverseQueue(int k)
{
 int * arr,ctr;
 arr=(int *)malloc(sizeof(int)*k);
 for(ctr=0;ctr<k ; ctr++)
 arr[ctr]=deq();
 for(ctr=k-1;ctr>=0;ctr--)
/
o
(ct ;ct
> 0;ct
)
 enq(arr[ctr]);
 for(ctr = 0; ctr<size-k;ctr++)
 enq(deq());
 }
int Front() {
 return front->data; }
void printQ() {
 int ctr;
 for( ctr=0;ctr<size;ctr++)
 {
 enq(Front());
 printf("%d ",deq());
 }
 }
int main() {
 int arr,n,ctr,k;
 scanf("%d",&n);

 for(ctr =0 ; ctr < n; ctr++)
 {
 scanf("%d",&arr);
 enq(arr);

 }
 scanf("%d",&k);
 reverseQueue(k);
 printQ(); }